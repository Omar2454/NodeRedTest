[
    {
        "id": "02bc6bb717467a22",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "da9614598250ea87",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "41ad1ea2ee8194fe",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3e9378b11cb23e8d",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "13530439b3021375",
        "type": "tab",
        "label": "Flow 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7f5bfd9695060b10",
        "type": "tab",
        "label": "Flow 6",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cf4a3fe65d7a6fab",
        "type": "tab",
        "label": "Flow 7",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8cfefc559615c687",
        "type": "MySQLdatabase",
        "name": "",
        "host": "hypercell.myvnc.com",
        "port": "3306",
        "db": "testNode",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "469e1d6199c5b98a",
        "type": "kafka-broker",
        "name": "kafkaHyperCell",
        "hosts": "hypercell.myvnc.com:9092",
        "selfsign": false,
        "usetls": false,
        "cacert": "",
        "clientcert": "",
        "privatekey": "",
        "passphrase": ""
    },
    {
        "id": "34102811518a3f5b",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4af1d2bbbd10d683",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "63b5301a727ec1e4",
        "type": "ui_group",
        "name": "Default",
        "tab": "34102811518a3f5b",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "40c2c99293fefdd7",
        "type": "kafka-broker",
        "name": "localkafka",
        "hosts": "localhost:9092",
        "selfsign": false,
        "usetls": false,
        "cacert": "",
        "clientcert": "",
        "privatekey": "",
        "passphrase": ""
    },
    {
        "id": "c0bd799bee3454c9",
        "type": "inject",
        "z": "02bc6bb717467a22",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "36bcd75bbe6bc6e4"
            ]
        ]
    },
    {
        "id": "f2f2b477f3b6f5cb",
        "type": "debug",
        "z": "02bc6bb717467a22",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 120,
        "wires": []
    },
    {
        "id": "36bcd75bbe6bc6e4",
        "type": "function",
        "z": "02bc6bb717467a22",
        "name": "function 1",
        "func": "// Create a Date object from the payload\nvar date = new Date(msg.payload);\n// Change the payload to be a formatted Date string\nmsg.payload = date.toString();\n// Return the message so it can be sent on\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "f2f2b477f3b6f5cb"
            ]
        ]
    },
    {
        "id": "92661d7f903e2fda",
        "type": "inject",
        "z": "02bc6bb717467a22",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "5434e6bc114af06e",
        "type": "inject",
        "z": "da9614598250ea87",
        "name": "Inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 200,
        "wires": [
            [
                "915bdf8e757650ec"
            ]
        ]
    },
    {
        "id": "915bdf8e757650ec",
        "type": "http request",
        "z": "da9614598250ea87",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_month.csv",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 200,
        "wires": [
            [
                "3598d8e8b6d0397a"
            ]
        ]
    },
    {
        "id": "3598d8e8b6d0397a",
        "type": "csv",
        "z": "da9614598250ea87",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 650,
        "y": 200,
        "wires": [
            [
                "90eeb2ef8a93b76d",
                "14180ae7f60f2d68"
            ]
        ]
    },
    {
        "id": "90eeb2ef8a93b76d",
        "type": "debug",
        "z": "da9614598250ea87",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 200,
        "wires": []
    },
    {
        "id": "14180ae7f60f2d68",
        "type": "switch",
        "z": "da9614598250ea87",
        "name": "",
        "property": "payload.mag",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "7",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 300,
        "wires": [
            [
                "68e43f62c24d9ff7"
            ]
        ]
    },
    {
        "id": "68e43f62c24d9ff7",
        "type": "change",
        "z": "da9614598250ea87",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "PANIC!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 300,
        "wires": [
            [
                "b310090422cc2f34"
            ]
        ]
    },
    {
        "id": "b310090422cc2f34",
        "type": "debug",
        "z": "da9614598250ea87",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 420,
        "wires": []
    },
    {
        "id": "da81f729977260b4",
        "type": "http request",
        "z": "41ad1ea2ee8194fe",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://dev-58539594.okta.com/api/v1/authn",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 320,
        "wires": [
            [
                "19a5dd1d4a2f71a3",
                "3f28dfd4cc3f9a36"
            ]
        ]
    },
    {
        "id": "ca2e5bc72fa8740e",
        "type": "ui_text_input",
        "z": "41ad1ea2ee8194fe",
        "name": "",
        "label": "Username",
        "tooltip": "",
        "group": "63b5301a727ec1e4",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "username",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 230,
        "y": 100,
        "wires": [
            [
                "d95bc96ec4978a57"
            ]
        ]
    },
    {
        "id": "609ec14a14f9eb89",
        "type": "ui_text_input",
        "z": "41ad1ea2ee8194fe",
        "name": "",
        "label": "Password",
        "tooltip": "",
        "group": "63b5301a727ec1e4",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "password",
        "delay": 300,
        "topic": "password",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "90ea6613bd473b22"
            ]
        ]
    },
    {
        "id": "8dc23bbadbec8b88",
        "type": "ui_button",
        "z": "41ad1ea2ee8194fe",
        "name": "",
        "group": "63b5301a727ec1e4",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Login",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 210,
        "y": 220,
        "wires": [
            [
                "cda7baf051030e6f"
            ]
        ]
    },
    {
        "id": "d95bc96ec4978a57",
        "type": "function",
        "z": "41ad1ea2ee8194fe",
        "name": "function 7",
        "func": "// Assuming the username is passed in msg.payload\nflow.set(\"username\", msg.payload);\nreturn msg; // If you want to pass the message to a debug node to check\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            [
                "71416e840e9291cd"
            ]
        ]
    },
    {
        "id": "90ea6613bd473b22",
        "type": "function",
        "z": "41ad1ea2ee8194fe",
        "name": "function 8",
        "func": "// Assuming the password is passed in msg.payload\nflow.set(\"password\", msg.payload);\nreturn msg; // If you want to pass the message to a debug node to check\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 160,
        "wires": [
            [
                "e18c9faee7d01685"
            ]
        ]
    },
    {
        "id": "cda7baf051030e6f",
        "type": "function",
        "z": "41ad1ea2ee8194fe",
        "name": "function 9",
        "func": "// Retrieve credentials from the flow context\nlet username = flow.get(\"username\");\nlet password = flow.get(\"password\");\n\n// Clear the credentials from the flow context for security purposes\nflow.set(\"username\", null);\nflow.set(\"password\", null);\n\n// Check if both username and password have been entered\nif (!username || !password) {\n    // If one or both are missing, set an error message\n    msg.payload = \"Username or password incorrect\";\n    msg.topic = \"error\";\n} else {\n    // If both are present, prepare the payload for the authentication request\n    msg.payload = {\n        username: username,\n        password: password\n    };\n    msg.topic = \"auth\";\n}\n\n// Pass the message to the next node (which might be an HTTP request node or directly to ui_text node for error)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "4d5f3f9aa85ce686"
            ]
        ]
    },
    {
        "id": "19a5dd1d4a2f71a3",
        "type": "function",
        "z": "41ad1ea2ee8194fe",
        "name": "function 10",
        "func": "// Check if the authentication was successful\nif (msg.statusCode === 200) {\n    // Handle successful authentication\n    msg.payload = \"Authentication successful!\";\n    // You can add additional logic here, like setting flow variables, etc.\n} else {\n    // Handle failed authentication\n    var errorMessage = \"Authentication failed!\";\n    if (msg.payload && msg.payload.errorSummary) {\n        errorMessage += \" Reason: \" + msg.payload.errorSummary;\n    }\n    msg.payload = errorMessage;\n}\n\n// Pass the message to the next node (which will be the UI text node)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 400,
        "wires": [
            [
                "864ff1d57b32ad62"
            ]
        ]
    },
    {
        "id": "864ff1d57b32ad62",
        "type": "ui_text",
        "z": "41ad1ea2ee8194fe",
        "group": "63b5301a727ec1e4",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Authentication Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 800,
        "y": 520,
        "wires": []
    },
    {
        "id": "71416e840e9291cd",
        "type": "debug",
        "z": "41ad1ea2ee8194fe",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 100,
        "wires": []
    },
    {
        "id": "e18c9faee7d01685",
        "type": "debug",
        "z": "41ad1ea2ee8194fe",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 160,
        "wires": []
    },
    {
        "id": "3f28dfd4cc3f9a36",
        "type": "function",
        "z": "41ad1ea2ee8194fe",
        "name": "function 11",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 320,
        "wires": [
            [
                "ae10a2964747a8f4"
            ]
        ]
    },
    {
        "id": "094b5ae1e003e302",
        "type": "debug",
        "z": "41ad1ea2ee8194fe",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 240,
        "wires": []
    },
    {
        "id": "ae10a2964747a8f4",
        "type": "json",
        "z": "41ad1ea2ee8194fe",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 770,
        "y": 320,
        "wires": [
            [
                "094b5ae1e003e302"
            ]
        ]
    },
    {
        "id": "4d5f3f9aa85ce686",
        "type": "switch",
        "z": "41ad1ea2ee8194fe",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "auth",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 320,
        "wires": [
            [
                "da81f729977260b4",
                "e7c113a875620e69"
            ],
            [
                "864ff1d57b32ad62"
            ]
        ]
    },
    {
        "id": "e7c113a875620e69",
        "type": "debug",
        "z": "41ad1ea2ee8194fe",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 280,
        "wires": []
    },
    {
        "id": "34fc4b6ed77772f5",
        "type": "mysql",
        "z": "3e9378b11cb23e8d",
        "d": true,
        "mydb": "8cfefc559615c687",
        "name": "test",
        "x": 730,
        "y": 100,
        "wires": [
            [
                "bb230cbf1b398d2c"
            ]
        ]
    },
    {
        "id": "9711e611cf8be5a7",
        "type": "inject",
        "z": "3e9378b11cb23e8d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[143]",
        "payloadType": "json",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "1500600835fb5767"
            ]
        ]
    },
    {
        "id": "bb230cbf1b398d2c",
        "type": "debug",
        "z": "3e9378b11cb23e8d",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 140,
        "wires": []
    },
    {
        "id": "f75e574b8906189b",
        "type": "kafka-producer",
        "z": "3e9378b11cb23e8d",
        "d": true,
        "name": "",
        "broker": "40c2c99293fefdd7",
        "topic": "test_topic",
        "requireAcks": 1,
        "ackTimeoutMs": 100,
        "attributes": 0,
        "x": 380,
        "y": 400,
        "wires": []
    },
    {
        "id": "e8c8614ae1ac68c1",
        "type": "kafka-consumer",
        "z": "3e9378b11cb23e8d",
        "d": true,
        "name": "",
        "broker": "40c2c99293fefdd7",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "test_topic",
        "groupid": "",
        "x": 720,
        "y": 400,
        "wires": [
            [
                "8def2da03a862e8f",
                "89355fb37f978e02"
            ]
        ]
    },
    {
        "id": "17f0ffd412b1e580",
        "type": "debug",
        "z": "3e9378b11cb23e8d",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 300,
        "wires": []
    },
    {
        "id": "1500600835fb5767",
        "type": "http request",
        "z": "3e9378b11cb23e8d",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:8070/api/v1/questions/getColumnAliases",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 80,
        "wires": [
            [
                "c4a2fe01c915fe2b"
            ]
        ]
    },
    {
        "id": "863a4e786b16662d",
        "type": "function",
        "z": "3e9378b11cb23e8d",
        "name": "function 3",
        "func": "var sql = \"INSERT INTO test2 (name, alias) VALUES \";\nvar placeholders = [];\nvar values = [];\n\n// Loop over each object in the array to build placeholders and values\nmsg.payload.forEach(function(record) {\n    placeholders.push(\"(?, ?)\"); // Two placeholders for each pair of name and alias\n    values.push(record.name, record.alias); // Add both name and alias to the values array\n});\n\n// Complete SQL statement\nsql += placeholders.join(\", \");\n\n// Set the msg.topic to the SQL statement\nmsg.topic = sql;\n\n// Set the msg.payload to the array of values\nmsg.payload = values;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 220,
        "wires": [
            [
                "34fc4b6ed77772f5"
            ]
        ]
    },
    {
        "id": "8def2da03a862e8f",
        "type": "debug",
        "z": "3e9378b11cb23e8d",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 400,
        "wires": []
    },
    {
        "id": "c4a2fe01c915fe2b",
        "type": "function",
        "z": "3e9378b11cb23e8d",
        "name": "function 4",
        "func": "msg.payload = JSON.stringify(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 320,
        "wires": [
            [
                "f75e574b8906189b"
            ]
        ]
    },
    {
        "id": "89355fb37f978e02",
        "type": "function",
        "z": "3e9378b11cb23e8d",
        "name": "function 5",
        "func": "// Assuming msg.payload.value is a JSON string\ntry {\n    var valueObject = JSON.parse(msg.payload.value);\n    msg.payload = valueObject;\n} catch (e) {\n    node.error(\"Error parsing JSON string: \" + e.message);\n    return null; \n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 300,
        "wires": [
            [
                "17f0ffd412b1e580",
                "863a4e786b16662d"
            ]
        ]
    },
    {
        "id": "596dc91070c16eb6",
        "type": "change",
        "z": "3e9378b11cb23e8d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "187d727cde4e04af",
        "type": "mysql",
        "z": "13530439b3021375",
        "mydb": "8cfefc559615c687",
        "name": "test",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "4f3a8ea549635c08",
                "7faabb7e814e79bc"
            ]
        ]
    },
    {
        "id": "4db0b49988abb880",
        "type": "cronplus",
        "z": "13530439b3021375",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "str",
                "payload": "family1",
                "expressionType": "cron",
                "expression": "0 22 * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 120,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "6d719d424f8104bb",
        "type": "function",
        "z": "13530439b3021375",
        "name": "function 12",
        "func": "msg.topic = `select * from testNode.test where \\`group\\` ='${msg.payload}'`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 220,
        "wires": [
            [
                "187d727cde4e04af"
            ]
        ]
    },
    {
        "id": "38a4a4674efd45b9",
        "type": "inject",
        "z": "13530439b3021375",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "family1",
        "payloadType": "str",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "6d719d424f8104bb"
            ]
        ]
    },
    {
        "id": "4f3a8ea549635c08",
        "type": "debug",
        "z": "13530439b3021375",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 220,
        "wires": []
    },
    {
        "id": "89a89bb85dd55865",
        "type": "kafka-producer",
        "z": "13530439b3021375",
        "name": "",
        "broker": "40c2c99293fefdd7",
        "topic": "test-topic",
        "requireAcks": 1,
        "ackTimeoutMs": 100,
        "attributes": 0,
        "x": 520,
        "y": 420,
        "wires": []
    },
    {
        "id": "1ebef39b4a8d325b",
        "type": "function",
        "z": "13530439b3021375",
        "name": "function 13",
        "func": "msg.payload = JSON.stringify(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "7faabb7e814e79bc",
        "type": "function",
        "z": "13530439b3021375",
        "name": "function 14",
        "func": "const results = msg.payload;\nif (Array.isArray(results)) {\n    const messages = results.map(result => {\n        return { payload: JSON.stringify(result) };\n    });\n    return [messages];\n} else {\n    node.error(\"Results are not in an array format\");\n    return null; // Stop the flow\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 300,
        "wires": [
            [
                "78886fff8f0ddd9e",
                "89a89bb85dd55865"
            ]
        ]
    },
    {
        "id": "78886fff8f0ddd9e",
        "type": "debug",
        "z": "13530439b3021375",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 340,
        "wires": []
    },
    {
        "id": "e6c4f1dd7527b8ab",
        "type": "kafka-consumer",
        "z": "7f5bfd9695060b10",
        "name": "",
        "broker": "40c2c99293fefdd7",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "test-topic",
        "groupid": "",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "de910ef09dae0d9d"
            ]
        ]
    },
    {
        "id": "e076f98212305178",
        "type": "debug",
        "z": "7f5bfd9695060b10",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 80,
        "wires": []
    },
    {
        "id": "de910ef09dae0d9d",
        "type": "function",
        "z": "7f5bfd9695060b10",
        "name": "function 15",
        "func": "try {\n    msg.payload = JSON.parse(msg.payload.value);\n    return msg;\n} catch (e) {\n    node.error(\"Error parsing JSON\", e);\n    return null; // Stop the flow if there's an error\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 100,
        "wires": [
            [
                "e076f98212305178",
                "da031b9ea047d63c"
            ]
        ]
    },
    {
        "id": "da031b9ea047d63c",
        "type": "function",
        "z": "7f5bfd9695060b10",
        "name": "function 16",
        "func": "// Assuming msg.payload is the object received from Kafka\nconst record = msg.payload;\n\nif (record && record.id) {\n    msg.topic = `UPDATE testNode.test SET status = 'Successful' WHERE id = ${record.id}`;\n    return msg;\n} else {\n    node.error(\"Invalid record\");\n    return null; // Stop the flow if the record is invalid\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "5a33f9496d816cbc"
            ]
        ]
    },
    {
        "id": "5a33f9496d816cbc",
        "type": "mysql",
        "z": "7f5bfd9695060b10",
        "mydb": "8cfefc559615c687",
        "name": "test",
        "x": 770,
        "y": 220,
        "wires": [
            [
                "8b06999fb7e3e294"
            ]
        ]
    },
    {
        "id": "8b06999fb7e3e294",
        "type": "debug",
        "z": "7f5bfd9695060b10",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 220,
        "wires": []
    },
    {
        "id": "b96975588c1bcd7d",
        "type": "debug",
        "z": "cf4a3fe65d7a6fab",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 120,
        "wires": []
    }
]